/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Button } from '@mui/material';
import { styled } from '@mui/material/styles';

const TypeQuest = styled('div')({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  boxShadow: `0px 4px 6px rgba(3, 0, 161, 0.2)`,
  borderRadius: `8px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: 'auto',
});

const Image1 = styled('div')({
  backgroundImage: `url(assets/images/Card1_Image.png)`,
  backgroundPosition: `center`,
  backgroundSize: `cover`,
  backgroundRepeat: `no-repeat`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  height: `257px`,
  margin: `0px`,
});

const TextButton = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 40px 30px 28px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `22px 0px 0px 0px`,
});

const LoremIpsumTestToBeSe = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 1'].textDecoration,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
  width: `322px`,
  zIndex: `2`,
  margin: `0px`,
}));

const ButtonClicked = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(107, 104, 255, 1)`,
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `700`,
  fontSize: `20px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  height: `48px`,
  width: `138px`,
  zIndex: `1`,
  margin: `15px 0px 0px 0px`,
}));

const ButtonContained = styled(Button)({
  zIndex: `0`,
  margin: `15px 0px 0px 0px`,
});

function Card1(props) {
  return (
    <TypeQuest className={props.className}>
      <Image1></Image1>
      <TextButton>
        <LoremIpsumTestToBeSe>
          {`Lorem ipsum test to be seen and not read for placement only. Lorem ipsum test to be seen.`}
        </LoremIpsumTestToBeSe>
        {false && <ButtonClicked>{`Button Clicked!`}</ButtonClicked>}
        <ButtonContained variant="contained" size="large" color="primary">
          {' '}
          Press Me{' '}
        </ButtonContained>
      </TextButton>
    </TypeQuest>
  );
}

export default Card1;
